/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.rudysysu.codes.thriftclient;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2024-03-15")
public class TBizRiskControlStatService {

  public interface Iface {

    /**
     * 查询用户消费统计
     * 累计数据从2023-03-01开始
     * 最近数据从2024-02-01开始
     * @param uid 用户UID，必填
     * @param latestNDays 查最近N天的数据，必填
     * @return BizRiskControlUserConsumeStat
     * @throws ServiceException
     * 
     * @param uid
     * @param latestNDays
     */
    public TBizRiskControlUserConsumeStat queryUserConsumeStat(long uid, int latestNDays) throws TServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryUserConsumeStat(long uid, int latestNDays, org.apache.thrift.async.AsyncMethodCallback<TBizRiskControlUserConsumeStat> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TBizRiskControlUserConsumeStat queryUserConsumeStat(long uid, int latestNDays) throws TServiceException, org.apache.thrift.TException
    {
      send_queryUserConsumeStat(uid, latestNDays);
      return recv_queryUserConsumeStat();
    }

    public void send_queryUserConsumeStat(long uid, int latestNDays) throws org.apache.thrift.TException
    {
      queryUserConsumeStat_args args = new queryUserConsumeStat_args();
      args.setUid(uid);
      args.setLatestNDays(latestNDays);
      sendBase("queryUserConsumeStat", args);
    }

    public TBizRiskControlUserConsumeStat recv_queryUserConsumeStat() throws TServiceException, org.apache.thrift.TException
    {
      queryUserConsumeStat_result result = new queryUserConsumeStat_result();
      receiveBase(result, "queryUserConsumeStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserConsumeStat failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryUserConsumeStat(long uid, int latestNDays, org.apache.thrift.async.AsyncMethodCallback<TBizRiskControlUserConsumeStat> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserConsumeStat_call method_call = new queryUserConsumeStat_call(uid, latestNDays, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserConsumeStat_call extends org.apache.thrift.async.TAsyncMethodCall<TBizRiskControlUserConsumeStat> {
      private long uid;
      private int latestNDays;
      public queryUserConsumeStat_call(long uid, int latestNDays, org.apache.thrift.async.AsyncMethodCallback<TBizRiskControlUserConsumeStat> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.latestNDays = latestNDays;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserConsumeStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserConsumeStat_args args = new queryUserConsumeStat_args();
        args.setUid(uid);
        args.setLatestNDays(latestNDays);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBizRiskControlUserConsumeStat getResult() throws TServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserConsumeStat();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryUserConsumeStat", new queryUserConsumeStat());
      return processMap;
    }

    public static class queryUserConsumeStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserConsumeStat_args> {
      public queryUserConsumeStat() {
        super("queryUserConsumeStat");
      }

      public queryUserConsumeStat_args getEmptyArgsInstance() {
        return new queryUserConsumeStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queryUserConsumeStat_result getResult(I iface, queryUserConsumeStat_args args) throws org.apache.thrift.TException {
        queryUserConsumeStat_result result = new queryUserConsumeStat_result();
        try {
          result.success = iface.queryUserConsumeStat(args.uid, args.latestNDays);
        } catch (TServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryUserConsumeStat", new queryUserConsumeStat());
      return processMap;
    }

    public static class queryUserConsumeStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserConsumeStat_args, TBizRiskControlUserConsumeStat> {
      public queryUserConsumeStat() {
        super("queryUserConsumeStat");
      }

      public queryUserConsumeStat_args getEmptyArgsInstance() {
        return new queryUserConsumeStat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TBizRiskControlUserConsumeStat> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TBizRiskControlUserConsumeStat>() { 
          public void onComplete(TBizRiskControlUserConsumeStat o) {
            queryUserConsumeStat_result result = new queryUserConsumeStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryUserConsumeStat_result result = new queryUserConsumeStat_result();
            if (e instanceof TServiceException) {
              result.ex1 = (TServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserConsumeStat_args args, org.apache.thrift.async.AsyncMethodCallback<TBizRiskControlUserConsumeStat> resultHandler) throws org.apache.thrift.TException {
        iface.queryUserConsumeStat(args.uid, args.latestNDays,resultHandler);
      }
    }

  }

  public static class queryUserConsumeStat_args implements org.apache.thrift.TBase<queryUserConsumeStat_args, queryUserConsumeStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserConsumeStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserConsumeStat_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LATEST_NDAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("latestNDays", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserConsumeStat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserConsumeStat_argsTupleSchemeFactory();

    public long uid; // required
    public int latestNDays; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      LATEST_NDAYS((short)2, "latestNDays");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // LATEST_NDAYS
            return LATEST_NDAYS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __LATESTNDAYS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LATEST_NDAYS, new org.apache.thrift.meta_data.FieldMetaData("latestNDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserConsumeStat_args.class, metaDataMap);
    }

    public queryUserConsumeStat_args() {
    }

    public queryUserConsumeStat_args(
      long uid,
      int latestNDays)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.latestNDays = latestNDays;
      setLatestNDaysIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserConsumeStat_args(queryUserConsumeStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.latestNDays = other.latestNDays;
    }

    public queryUserConsumeStat_args deepCopy() {
      return new queryUserConsumeStat_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setLatestNDaysIsSet(false);
      this.latestNDays = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public queryUserConsumeStat_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getLatestNDays() {
      return this.latestNDays;
    }

    public queryUserConsumeStat_args setLatestNDays(int latestNDays) {
      this.latestNDays = latestNDays;
      setLatestNDaysIsSet(true);
      return this;
    }

    public void unsetLatestNDays() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATESTNDAYS_ISSET_ID);
    }

    /** Returns true if field latestNDays is set (has been assigned a value) and false otherwise */
    public boolean isSetLatestNDays() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATESTNDAYS_ISSET_ID);
    }

    public void setLatestNDaysIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATESTNDAYS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case LATEST_NDAYS:
        if (value == null) {
          unsetLatestNDays();
        } else {
          setLatestNDays((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case LATEST_NDAYS:
        return getLatestNDays();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case LATEST_NDAYS:
        return isSetLatestNDays();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserConsumeStat_args)
        return this.equals((queryUserConsumeStat_args)that);
      return false;
    }

    public boolean equals(queryUserConsumeStat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_latestNDays = true;
      boolean that_present_latestNDays = true;
      if (this_present_latestNDays || that_present_latestNDays) {
        if (!(this_present_latestNDays && that_present_latestNDays))
          return false;
        if (this.latestNDays != that.latestNDays)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + latestNDays;

      return hashCode;
    }

    @Override
    public int compareTo(queryUserConsumeStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLatestNDays()).compareTo(other.isSetLatestNDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLatestNDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestNDays, other.latestNDays);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserConsumeStat_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("latestNDays:");
      sb.append(this.latestNDays);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserConsumeStat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUserConsumeStat_argsStandardScheme getScheme() {
        return new queryUserConsumeStat_argsStandardScheme();
      }
    }

    private static class queryUserConsumeStat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserConsumeStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserConsumeStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LATEST_NDAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.latestNDays = iprot.readI32();
                struct.setLatestNDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserConsumeStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LATEST_NDAYS_FIELD_DESC);
        oprot.writeI32(struct.latestNDays);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserConsumeStat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUserConsumeStat_argsTupleScheme getScheme() {
        return new queryUserConsumeStat_argsTupleScheme();
      }
    }

    private static class queryUserConsumeStat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserConsumeStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserConsumeStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetLatestNDays()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetLatestNDays()) {
          oprot.writeI32(struct.latestNDays);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserConsumeStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.latestNDays = iprot.readI32();
          struct.setLatestNDaysIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryUserConsumeStat_result implements org.apache.thrift.TBase<queryUserConsumeStat_result, queryUserConsumeStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserConsumeStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserConsumeStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserConsumeStat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserConsumeStat_resultTupleSchemeFactory();

    public TBizRiskControlUserConsumeStat success; // required
    public TServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBizRiskControlUserConsumeStat.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserConsumeStat_result.class, metaDataMap);
    }

    public queryUserConsumeStat_result() {
    }

    public queryUserConsumeStat_result(
      TBizRiskControlUserConsumeStat success,
      TServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserConsumeStat_result(queryUserConsumeStat_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBizRiskControlUserConsumeStat(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new TServiceException(other.ex1);
      }
    }

    public queryUserConsumeStat_result deepCopy() {
      return new queryUserConsumeStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public TBizRiskControlUserConsumeStat getSuccess() {
      return this.success;
    }

    public queryUserConsumeStat_result setSuccess(TBizRiskControlUserConsumeStat success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TServiceException getEx1() {
      return this.ex1;
    }

    public queryUserConsumeStat_result setEx1(TServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBizRiskControlUserConsumeStat)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((TServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserConsumeStat_result)
        return this.equals((queryUserConsumeStat_result)that);
      return false;
    }

    public boolean equals(queryUserConsumeStat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryUserConsumeStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserConsumeStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserConsumeStat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUserConsumeStat_resultStandardScheme getScheme() {
        return new queryUserConsumeStat_resultStandardScheme();
      }
    }

    private static class queryUserConsumeStat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserConsumeStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserConsumeStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBizRiskControlUserConsumeStat();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new TServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserConsumeStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserConsumeStat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUserConsumeStat_resultTupleScheme getScheme() {
        return new queryUserConsumeStat_resultTupleScheme();
      }
    }

    private static class queryUserConsumeStat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserConsumeStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserConsumeStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserConsumeStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TBizRiskControlUserConsumeStat();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new TServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
